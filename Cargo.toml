[package]
name = "vector"
version = "0.13.0"
authors = ["Vector Contributors <vector@timber.io>"]
edition = "2018"
description = "A lightweight and ultra-fast tool for building observability pipelines"
homepage = "https://vector.dev"
license = "MPL-2.0"
readme = "README.md"
publish = false
default-run = "vector"
autobenches = false # our benchmarks are not runnable on their own either way

[[bin]]
name = "graphql-schema"
path = "src/api/schema/gen.rs"
required-features = ["default-no-api-client"]

[profile.release]
lto = true        # Optimize our binary at link stage.
codegen-units = 1 # Increases compile time but improves optmization alternatives.
debug = false     # Do not include debug symbols in the executable.

[profile.bench]
debug = true

[package.metadata.deb]
name = "vector"
maintainer-scripts = "distribution/debian/scripts/"
conf-files = ["/etc/vector/vector.toml"]
assets = [
  ["target/release/vector", "/usr/bin/", "755"],
  ["config/vector.toml", "/etc/vector/vector.toml", "644"],
  ["config/examples/*", "/etc/vector/examples/", "644"],
  ["distribution/systemd/vector.service", "/etc/systemd/system/vector.service", "644"],
  ["distribution/systemd/vector.default", "/etc/default/vector", "600"]
]
license-file = ["target/debian-license.txt"]
extended-description-file = "target/debian-extended-description.txt"

# libc requirements are defined by `cross`
# https://github.com/rust-embedded/cross#supported-targets
# Though, it seems like aarch64 libc is actually 2.18 and not 2.19
[package.metadata.deb.variants.armv7-unknown-linux-gnueabihf]
depends = "libc6 (>= 2.15)"

[package.metadata.deb.variants.x86_64-unknown-linux-gnu]
depends = "libc6 (>= 2.15)"

[package.metadata.deb.variants.x86_64-unknown-linux-musl]
depends = ""

[package.metadata.deb.variants.aarch64-unknown-linux-gnu]
depends = "libc6 (>= 2.18)"

[package.metadata.deb.variants.aarch64-unknown-linux-musl]
depends = ""

[workspace]
members = [
  ".",
  "lib/codec",
  "lib/derive_is_enum_variant",
  "lib/fakedata",
  "lib/file-source",
  "lib/k8s-e2e-tests",
  "lib/k8s-test-framework",
  "lib/portpicker",
  "lib/prometheus-parser",
  "lib/shared",
  "lib/tracing-limit",
  "lib/vector-api-client",
  "lib/vector-wasm",
  "lib/vrl/cli",
  "lib/vrl/compiler",
  "lib/vrl/core",
  "lib/vrl/diagnostic",
  "lib/vrl/parser",
  "lib/vrl/stdlib",
  "lib/vrl/tests",
  "lib/vrl/proptests",
]

[dependencies]
# Internal libs
codec = { path = "lib/codec" }
derive_is_enum_variant = { path = "lib/derive_is_enum_variant" }
fakedata = { path = "lib/fakedata", optional = true }
file-source = { path = "lib/file-source", optional = true }
portpicker = { path = "lib/portpicker" }
prometheus-parser = { path = "lib/prometheus-parser", optional = true }
shared = { path = "lib/shared" }
tracing-limit = { path = "lib/tracing-limit" }
vector-api-client = { path = "lib/vector-api-client", optional = true }
vrl-cli = { path = "lib/vrl/cli", optional = true }

# Tokio / Futures
async-trait = "0.1"
futures = { version = "0.3", default-features = false, features = ["compat", "io-compat"] }
futures01 = { package = "futures", version = "0.1.25" }
tokio = { version = "0.2.13", features = ["blocking", "fs", "io-std", "macros", "process", "rt-core", "rt-threaded", "signal", "stream", "sync", "time", "udp", "uds"] }
tokio-openssl = "0.4.0"
tokio-util = { version = "0.3.1", features = ["codec"] }

# Tracing
tracing = "0.1.15"
tracing-core = "0.1.17"
tracing-futures = { version = "0.2", features = ["futures-01", "futures-03"]}
tracing-log = "0.1.0"
tracing-subscriber = "0.2.17"
tracing-tower = { git = "https://github.com/tokio-rs/tracing", rev = "f470db1b0354b368f62f9ee4d763595d16373231" }

# Metrics
metrics = "=0.13.0-alpha.13"
metrics-tracing-context = "=0.1.0-alpha.7"
metrics-util = "=0.4.0-alpha.10"
# Indirect dependency; benchmark regression detected; pinning until
# https://github.com/timberio/vector/issues/6412 is resolved
metrics-macros = "=0.2.0"

# Aws
rusoto_cloudwatch = { version = "0.45.0", optional = true }
rusoto_core = { version = "0.45.0", features = ["encoding"], optional = true }
rusoto_credential = { version = "0.45.0", optional = true }
rusoto_es = { version = "0.45.0", optional = true }
rusoto_firehose = { version = "0.45.0", optional = true }
rusoto_kinesis = { version = "0.45.0", optional = true }
rusoto_logs = { version = "0.45.0", optional = true }
rusoto_s3 = { version = "0.45.0", optional = true }
rusoto_signature = { version = "0.45.0", optional = true }
rusoto_sqs = { version = "0.45.0", optional = true }
rusoto_sts = { version = "0.45.0", optional = true }

# Tower
tower = { version = "0.3.1", git = "https://github.com/tower-rs/tower", rev = "43168944220ed32dab83cb4f11f7b97abc5818d5", features = ["buffer", "limit", "retry", "timeout", "util"] }

# Serde
serde = { version = "1.0.117", features = ["derive"] }
serde_json = { version = "1.0.33", features = ["raw_value"] }
serde_yaml = { version ="0.8.13" }

# Prost
prost = "0.6.1"
prost-types = "0.6.1"

# GCP
goauth = { version = "0.9.0", optional = true }
smpl_jwt = { version = "0.6.1", optional = true }

# API
async-graphql = { version = "=2.5.0", optional = true }
async-graphql-warp = { version = "=2.5.0", optional = true }
itertools = { version = "0.10.0", optional = true }

# API client
crossterm = { version = "0.19.0", optional = true }
num-format = { version = "0.4.0", optional = true }
number_prefix = { version = "0.4", optional = true }
tui = { version = "0.14.0", optional = true, default-features = false, features = ["crossterm"] }

# VRL Lang
vrl = { path = "lib/vrl/core" }
vrl-stdlib = { path = "lib/vrl/stdlib" }

# External libs
anyhow = "1.0.37"
async-compression = { version = "0.3.7", features = ["tokio-02", "gzip", "zstd"] }
avro-rs = { version = "0.13.0", optional = true }
base64 = { version = "0.13.0", optional = true }
bloom = { version = "0.3.2", optional = true }
bollard = { version = "0.9.1", features = ["ssl"], optional = true }
bytes = { version = "0.5.6", features = ["serde"] }
bytesize = { version = "1.0.0", optional = true }
chrono = { version = "0.4.19", features = ["serde"] }
cidr-utils = "0.5.1"
colored = "2.0"
dashmap = "4"
db-key = "0.0.5"
derivative = "2.1.1"
dirs-next = { version = "2.0.0", optional = true }
dyn-clone = "1.0.3"
encoding_rs = { version = "0.8", features = ["serde"] }
evmap = { version = "10.0.2", features = ["bytes"], optional = true }
exitcode = "1.1.2"
flate2 = "1.0.19"
getset = "0.1.1"
glob = "0.3.0"
grok = { version = "~1.0.1", optional = true }
headers = "0.3"
heim = { version = "0.1.0-rc.1", features = ["full"], optional = true }
hostname = "0.3.1"
http = "0.2"
hyper = "0.13"
hyper-openssl = "0.8"
indexmap = {version = "1.6.2", features = ["serde"]}
indoc = "1.0.3"
inventory = "0.1.10"
jemallocator = { version = "0.3.0", optional = true }
k8s-openapi = { version = "0.11.0", features = ["v1_16"], optional = true }
lazy_static = "1.3.0"
leveldb = { version = "0.8", optional = true, default-features = false }
listenfd = { version = "0.3.3", optional = true }
logfmt = { version = "0.0.2", optional = true }
lru = { version = "0.6.3", optional = true }
maxminddb = { version = "0.17.0", optional = true }
mongodb = { version = "1.1.1", optional = true }
async-nats = { version = "0.9.4", optional = true }
nom = { version = "6.0.1", optional = true }
notify = "4.0.14"
num_cpus = "1.10.0"
once_cell = "1.3"
openssl = "0.10.32"
openssl-probe = "0.1.2"
percent-encoding = "2.1.0"
pest = "2.1.3"
pest_derive = "2.1.0"
pin-project = "1.0.1"
postgres-openssl = { version = "0.3.0", optional = true }
pulsar = { version = "1.0.0", default-features = false, features = ["tokio-runtime"], optional = true }
rand = { version = "0.8.0", features = ["small_rng"] }
rand_distr = "0.4.0"
rdkafka = { version = "0.24.0", features = ["libz", "ssl", "zstd"], optional = true }
regex = "1.4.5"
# make sure to update the external docs when the Lua version changes
rlua = { version = "0.17.0", optional = true }
seahash = { version = "4.0.1", optional = true }
semver = { version = "0.11.0", features = ["serde"], optional = true }
snafu = { version = "0.6.10", features = ["futures", "futures-01"] }
snap = { version = "1.0.3", optional = true }
socket2 = { version = "0.3.19", optional = true }
stream-cancel = "0.6.2"
strip-ansi-escapes = "0.1.0"
structopt = "0.3.21"
syslog = { version = "5", optional = true }
syslog_loose = { version = "0.10.0", optional = true }
# Indirect dependency; pinning until
# https://github.com/timberio/vector/issues/6005 is resolved
thread_local = "=1.0.1"
tokio-postgres = { version = "0.5.5", features = ["runtime", "with-chrono-0_4"], optional = true }
toml = "0.5.8"
typetag = "0.1.6"
url = "2.2.1"
uuid = { version = "0.8", features = ["serde", "v4"], optional = true }
warp = { version = "0.2.5", default-features = false, optional = true }

# For WASM
async-stream = "0.3.0"
lucet-runtime = { git = "https://github.com/bytecodealliance/lucet.git", rev = "b1863dacc8c92c11e5434fc8815d9b9a26cfe3db", optional = true }
lucet-wasi = { git = "https://github.com/bytecodealliance/lucet.git", rev = "b1863dacc8c92c11e5434fc8815d9b9a26cfe3db", optional = true }
lucetc = { git = "https://github.com/bytecodealliance/lucet.git", rev = "b1863dacc8c92c11e5434fc8815d9b9a26cfe3db", optional = true }
vector-wasm = { path = "lib/vector-wasm", optional = true }

[target.'cfg(windows)'.dependencies]
schannel = "0.1"
windows-service = "0.3.1"

[target.'cfg(target_os = "macos")'.dependencies]
security-framework = "2.0"

[target.'cfg(unix)'.dependencies]
atty = "0.2"
nix = "0.20.0"

[build-dependencies]
prost-build = "0.6.1"
built = { version = "0.4.4", features = ["chrono", "git2"] }

[dev-dependencies]
approx = "0.4.0"
assert_cmd = "1.0.2"
base64 = "0.13"
criterion = { version = "0.3", features = ["html_reports"] }
httpmock = "0.5.2"
libc = "0.2.80"
libz-sys = "1.1.2"
matches = "0.1.8"
pretty_assertions = "0.7.1"
reqwest = { version = "0.10.9", features = ["json"] }
rusty-fork = "0.3.0"
tempfile = "3.0.6"
tokio = { version = "0.2", features = ["test-util"] }
tokio-test = "0.4"
tokio01-test = "0.1.1"
tower-test = "0.3.0"
walkdir = "2.2.7"

[features]
# Default features for *-unknown-linux-gnu and *-apple-darwin
default = ["api", "api-client", "leveldb", "rdkafka-plain", "sinks", "sources", "transforms", "unix", "vendor-all", "vrl-cli"]
# Default features for *-unknown-linux-* which make use of `cmake` for dependencies
default-cmake = ["api", "api-client", "leveldb", "rdkafka-cmake", "sinks", "sources", "transforms", "unix", "vendor-all", "vrl-cli"]
# Default features for *-pc-windows-msvc
# TODO: Enable SASL https://github.com/timberio/vector/pull/3081#issuecomment-659298042
default-msvc = ["api", "api-client", "leveldb", "rdkafka-cmake", "sinks", "sources", "transforms", "vendor-libz", "vendor-openssl", "vrl-cli"]
default-musl = ["api", "api-client", "leveldb", "rdkafka-cmake", "sinks", "sources", "transforms", "unix", "vendor-all", "vrl-cli"]
default-no-api-client = ["api", "leveldb", "rdkafka-plain", "sinks", "sources", "transforms", "unix", "vendor-all", "vrl-cli"]
default-no-vrl-cli = ["api", "leveldb", "rdkafka-plain", "sinks", "sources", "transforms", "unix", "vendor-all"]

all-logs = ["sinks-logs", "sources-logs", "transforms-logs"]
all-metrics = ["sinks-metrics", "sources-metrics", "transforms-metrics"]

# Target specific release features.
# The `make` tasks will select this according to the appropriate triple.
# Use this section to turn off or on specific features for specific triples.
target-aarch64-unknown-linux-gnu = ["api", "api-client", "leveldb", "rdkafka-cmake", "sinks", "sources", "transforms", "unix", "vendor-libz", "vendor-openssl", "vrl-cli"]
target-aarch64-unknown-linux-musl = ["api", "api-client", "leveldb", "rdkafka-cmake", "sinks", "sources", "transforms", "unix", "vendor-libz", "vendor-openssl", "vrl-cli"]
# TODO: Enable leveldb here for armv7-unknown-linux-musleabihf
target-armv7-unknown-linux-gnueabihf = ["api", "api-client", "leveldb", "rdkafka-cmake", "sinks", "sources", "transforms", "unix", "vendor-libz", "vendor-openssl", "vrl-cli"]
target-armv7-unknown-linux-musleabihf = ["api", "api-client", "rdkafka-cmake", "sinks", "sources", "transforms", "vendor-libz", "vendor-openssl", "vrl-cli"]
target-x86_64-unknown-linux-gnu = ["api", "api-client", "leveldb", "rdkafka-cmake", "sinks", "sources", "transforms", "unix", "vendor-all", "vrl-cli"]
target-x86_64-unknown-linux-musl = ["api", "api-client", "leveldb", "rdkafka-cmake", "sinks", "sources", "transforms", "unix", "vendor-libz", "vendor-openssl", "vrl-cli"]

# Enables `rdkafka` dependency.
# This feature is more portable, but requires `cmake` as build dependency. Use it if `rdkafka-plain` doesn't work.
# The `sasl` feature has to be added because of the limitations of `librdkafka` build scripts for `cmake`.
rdkafka-cmake = ["rdkafka", "rdkafka/cmake_build"]
# This feature is less portable, but doesn't require `cmake` as build dependency
rdkafka-plain = ["rdkafka"]
rusoto = ["rusoto_core", "rusoto_credential", "rusoto_signature", "rusoto_sts"]
sasl = ["rdkafka/gssapi"]
# Enables features that work only on systems providing `cfg(unix)`
unix = ["jemallocator"]
# These are **very** useful on Cross compilations!
vendor-all = ["vendor-libz", "vendor-openssl", "vendor-sasl"]
vendor-sasl = ["rdkafka/gssapi-vendored"]
vendor-openssl = ["openssl/vendored"]
vendor-libz = ["libz-sys/static"]
# This feature enables the WASM foreign module support.
wasm = ["lucet-runtime", "lucet-wasi", "lucetc", "vector-wasm"]

# Enables kubernetes dependencies and shared code. Kubernetes-related sources,
# transforms and sinks should depend on this feature.
kubernetes = ["k8s-openapi", "evmap"]

# API
api = [
  "async-graphql",
  "async-graphql-warp",
  "base64",
  "itertools",
]

# API client
api-client = [
  "crossterm",
  "num-format",
  "number_prefix",
  "tui",
  "vector-api-client",
]

# Sources
sources = ["sources-logs", "sources-metrics"]
sources-logs = [
  "sources-aws_kinesis_firehose",
  "sources-aws_s3",
  "sources-datadog",
  "sources-docker_logs",
  "sources-file",
  "sources-generator",
  "sources-heroku_logs",
  "sources-http",
  "sources-internal_logs",
  "sources-journald",
  "sources-kafka",
  "sources-kubernetes-logs",
  "sources-socket",
  "sources-splunk_hec",
  "sources-stdin",
  "sources-syslog",
  "sources-vector",
]
sources-metrics = [
  "sources-apache_metrics",
  "sources-aws_ecs_metrics",
  "sources-host_metrics",
  "sources-internal_metrics",
  "sources-mongodb_metrics",
  "sources-nginx_metrics",
  "sources-postgresql_metrics",
  "sources-prometheus",
  "sources-statsd",
  "sources-vector",
]

sources-apache_metrics = []
sources-aws_ecs_metrics = []
sources-aws_kinesis_firehose = ["base64", "sources-utils-tls", "warp"]
sources-aws_s3 = ["rusoto", "rusoto_s3", "rusoto_sqs", "semver", "uuid"]
sources-datadog = ["sources-utils-http"]
sources-docker_logs = ["bollard", "dirs-next"]
sources-file = ["bytesize", "file-source"]
sources-generator = ["fakedata"]
sources-heroku_logs = ["sources-utils-http"]
sources-host_metrics = ["heim"]
sources-http = ["sources-utils-http"]
sources-internal_logs = []
sources-internal_metrics = []
sources-journald = []
sources-kafka = ["rdkafka"]
sources-kubernetes-logs = ["file-source", "kubernetes", "transforms-merge", "transforms-regex_parser"]
sources-mongodb_metrics = ["mongodb"]
sources-nginx_metrics = ["nom"]
sources-postgresql_metrics = ["postgres-openssl", "tokio-postgres"]
sources-prometheus = ["prometheus-parser", "sinks-prometheus", "sources-utils-http", "warp"]
sources-socket = ["bytesize", "listenfd", "tokio-util/udp", "sources-utils-udp", "sources-utils-tcp-keepalive", "sources-utils-tcp-socket", "sources-utils-tls", "sources-utils-unix"]
sources-splunk_hec = ["bytesize", "sources-utils-tls", "warp"]
sources-statsd = ["listenfd", "sources-utils-tcp-keepalive", "sources-utils-tcp-socket", "sources-utils-tls", "sources-utils-udp", "sources-utils-unix", "tokio-util/udp"]
sources-stdin = ["bytesize"]
sources-syslog = ["bytesize", "listenfd", "tokio-util/udp", "sources-utils-udp", "sources-utils-tcp-keepalive", "sources-utils-tcp-socket", "sources-utils-tls", "sources-utils-unix", "syslog_loose"]
sources-utils-http = ["snap", "sources-utils-tls", "warp"]
sources-utils-tcp-keepalive = []
sources-utils-tcp-socket = []
sources-utils-tls = []
sources-utils-udp = ["socket2"]
sources-utils-unix = []
sources-vector = ["listenfd", "sources-utils-tcp-keepalive", "sources-utils-tcp-socket", "sources-utils-tls"]

# Transforms
transforms = ["transforms-logs", "transforms-metrics"]
transforms-logs = [
  "transforms-add_fields",
  "transforms-ansi_stripper",
  "transforms-aws_cloudwatch_logs_subscription_parser",
  "transforms-aws_ec2_metadata",
  "transforms-coercer",
  "transforms-concat",
  "transforms-dedupe",
  "transforms-field_filter",
  "transforms-filter",
  "transforms-geoip",
  "transforms-grok_parser",
  "transforms-json_parser",
  "transforms-key_value_parser",
  "transforms-log_to_metric",
  "transforms-logfmt_parser",
  "transforms-lua",
  "transforms-merge",
  "transforms-metric_to_log",
  "transforms-reduce",
  "transforms-regex_parser",
  "transforms-remap",
  "transforms-remove_fields",
  "transforms-rename_fields",
  "transforms-route",
  "transforms-sample",
  "transforms-split",
  "transforms-tokenizer",
]
transforms-metrics = [
  "transforms-add_tags",
  "transforms-filter",
  "transforms-log_to_metric",
  "transforms-lua",
  "transforms-metric_to_log",
  "transforms-remap",
  "transforms-remove_tags",
  "transforms-tag_cardinality_limit",
]

transforms-add_fields = []
transforms-add_tags = []
transforms-ansi_stripper = []
transforms-aws_cloudwatch_logs_subscription_parser= []
transforms-aws_ec2_metadata = ["evmap"]
transforms-coercer = []
transforms-concat = []
transforms-dedupe = ["lru"]
transforms-field_filter = []
transforms-filter = []
transforms-geoip = ["maxminddb"]
transforms-grok_parser = ["grok"]
transforms-json_parser = []
transforms-key_value_parser = []
transforms-log_to_metric = []
transforms-logfmt_parser = ["logfmt"]
transforms-lua = ["rlua"]
transforms-merge = []
transforms-metric_to_log = []
transforms-reduce = []
transforms-regex_parser = []
transforms-remap = []
transforms-remove_fields = []
transforms-remove_tags = []
transforms-rename_fields = []
transforms-route = []
transforms-sample = ["seahash"]
transforms-split = []
transforms-tag_cardinality_limit = ["bloom"]
transforms-tokenizer = []
transforms-wasm = ["wasm"]

# Sinks
sinks = ["sinks-logs", "sinks-metrics"]
sinks-logs = [
  "sinks-aws_cloudwatch_logs",
  "sinks-aws_kinesis_firehose",
  "sinks-aws_kinesis_streams",
  "sinks-aws_s3",
  "sinks-aws_sqs",
  "sinks-azure_monitor_logs",
  "sinks-blackhole",
  "sinks-clickhouse",
  "sinks-console",
  "sinks-datadog",
  "sinks-elasticsearch",
  "sinks-file",
  "sinks-gcp",
  "sinks-honeycomb",
  "sinks-http",
  "sinks-humio",
  "sinks-influxdb",
  "sinks-kafka",
  "sinks-logdna",
  "sinks-loki",
  "sinks-nats",
  "sinks-new_relic_logs",
  "sinks-papertrail",
  "sinks-pulsar",
  "sinks-sematext",
  "sinks-socket",
  "sinks-splunk_hec",
  "sinks-vector"
]
sinks-metrics = [
  "sinks-aws_cloudwatch_metrics",
  "sinks-blackhole",
  "sinks-console",
  "sinks-datadog",
  "sinks-humio",
  "sinks-influxdb",
  "sinks-kafka",
  "sinks-prometheus",
  "sinks-sematext",
  "sinks-statsd",
  "sinks-vector"
]

sinks-aws_cloudwatch_logs = ["rusoto", "rusoto_logs"]
sinks-aws_cloudwatch_metrics = ["rusoto", "rusoto_cloudwatch"]
sinks-aws_kinesis_firehose = ["rusoto", "rusoto_firehose"]
sinks-aws_kinesis_streams = ["rusoto", "rusoto_kinesis"]
sinks-aws_s3 = ["bytesize", "rusoto", "rusoto_s3", "uuid"]
sinks-aws_sqs = ["rusoto", "rusoto_sqs"]
sinks-azure_monitor_logs = ["bytesize"]
sinks-blackhole = []
sinks-clickhouse = ["bytesize"]
sinks-console = []
sinks-datadog = ["bytesize"]
sinks-elasticsearch = ["bytesize", "rusoto"]
sinks-file = []
sinks-gcp = ["base64", "bytesize", "goauth", "smpl_jwt", "uuid"]
sinks-honeycomb = ["bytesize"]
sinks-http = ["bytesize"]
sinks-humio = ["sinks-splunk_hec", "transforms-metric_to_log"]
sinks-influxdb = ["bytesize"]
sinks-kafka = []
sinks-logdna = ["bytesize"]
sinks-loki = ["bytesize", "uuid"]
sinks-nats = ["async-nats"]
sinks-new_relic_logs = ["bytesize", "sinks-http"]
sinks-papertrail = ["syslog"]
sinks-prometheus = ["prometheus-parser", "snap", "sources-utils-tls"]
sinks-pulsar = ["avro-rs", "pulsar"]
sinks-sematext = ["sinks-elasticsearch", "sinks-influxdb"]
sinks-socket = ["sinks-utils-udp"]
sinks-splunk_hec = ["bytesize"]
sinks-statsd = ["sinks-utils-udp", "tokio-util/udp"]
sinks-utils-udp = ["socket2"]
sinks-vector = ["sinks-utils-udp"]

# Identifies that the build is a nightly build
nightly = []

# Testing-related features
all-integration-tests = [
  "aws-integration-tests",
  "clickhouse-integration-tests",
  "docker-logs-integration-tests",
  "es-integration-tests",
  "gcp-cloud-storage-integration-tests",
  "gcp-integration-tests",
  "gcp-pubsub-integration-tests",
  "humio-integration-tests",
  "influxdb-integration-tests",
  "kafka-integration-tests",
  "loki-integration-tests",
  "mongodb_metrics-integration-tests",
  "nats-integration-tests",
  "nginx-integration-tests",
  "postgresql_metrics-integration-tests",
  "prometheus-integration-tests",
  "pulsar-integration-tests",
  "splunk-integration-tests",
]

aws-integration-tests = [
  "aws-cloudwatch-logs-integration-tests",
  "aws-cloudwatch-metrics-integration-tests",
  "aws-ec2-metadata-integration-tests",
  "aws-ecs-metrics-integration-tests",
  "aws-kinesis-firehose-integration-tests",
  "aws-kinesis-streams-integration-tests",
  "aws-s3-integration-tests",
  "aws-sqs-integration-tests",
]

aws-cloudwatch-logs-integration-tests = ["sinks-aws_cloudwatch_logs"]
aws-cloudwatch-metrics-integration-tests = ["sinks-aws_cloudwatch_metrics"]
aws-ec2-metadata-integration-tests = ["transforms-aws_ec2_metadata"]
aws-ecs-metrics-integration-tests = ["sources-aws_ecs_metrics"]
aws-kinesis-firehose-integration-tests = ["rusoto_es", "sinks-aws_kinesis_firehose", "sinks-elasticsearch"]
aws-kinesis-streams-integration-tests = ["sinks-aws_kinesis_streams"]
aws-s3-integration-tests = ["sinks-aws_s3", "sources-aws_s3"]
aws-sqs-integration-tests = ["sinks-aws_sqs"]
clickhouse-integration-tests = ["sinks-clickhouse", "warp"]
docker-logs-integration-tests = ["sources-docker_logs", "unix"]
es-integration-tests = ["sinks-elasticsearch"]
gcp-cloud-storage-integration-tests = ["sinks-gcp"]
gcp-integration-tests = ["sinks-gcp"]
gcp-pubsub-integration-tests = ["sinks-gcp"]
humio-integration-tests = ["sinks-humio"]
influxdb-integration-tests = ["sinks-influxdb"]
kafka-integration-tests = ["sinks-kafka", "sources-kafka"]
loki-integration-tests = ["sinks-loki"]
mongodb_metrics-integration-tests = ["sources-mongodb_metrics"]
nats-integration-tests = ["sinks-nats"]
nginx-integration-tests = ["sources-nginx_metrics"]
postgresql_metrics-integration-tests = ["sources-postgresql_metrics"]
prometheus-integration-tests = ["bytesize", "sinks-prometheus", "sources-prometheus"]
pulsar-integration-tests = ["sinks-pulsar"]
splunk-integration-tests = ["sinks-splunk_hec", "warp"]

disable-resolv-conf = []
shutdown-tests = ["rdkafka", "sinks-blackhole", "sinks-console", "sinks-prometheus", "sources", "transforms-log_to_metric", "transforms-lua", "unix"]

# grouping together features for benchmarks
# excluing API client due to running out of memory during linking in Github Actions
benches = ["leveldb", "rdkafka-plain", "sinks", "sources", "transforms", "unix", "vendor-all"]
language-benches = ["sinks-socket", "sources-socket", "transforms-add_fields", "transforms-json_parser", "transforms-lua", "transforms-regex_parser", "transforms-remap", "transforms-wasm"]
# Separate benching process for metrics due to the nature of the bootstrap procedures.
statistic-benches = []
metrics-benches = ["sinks-socket", "sources-socket"]
remap-benches = ["transforms-add_fields", "transforms-coercer", "transforms-json_parser", "transforms-remap"]
wasm-benches = ["transforms-add_fields", "transforms-field_filter", "transforms-lua", "transforms-remap", "transforms-wasm"]

[[bench]]
name = "default"
harness = false
required-features = ["benches"]

[[bench]]
name = "wasm"
path = "benches/wasm/mod.rs"
harness = false
required-features = ["wasm-benches"]

[[bench]]
name = "remap"
harness = false
required-features = ["remap-benches"]

[[bench]]
name = "languages"
harness = false
required-features = ["language-benches"]

[[bench]]
name = "metrics_on"
harness = false
required-features = ["metrics-benches"]

[[bench]]
name = "metrics_no_tracing_integration"
harness = false
required-features = ["metrics-benches"]

[[bench]]
name = "metrics_off"
harness = false
required-features = ["metrics-benches"]

[[bench]]
name = "distribution_statistic"
harness = false
required-features = ["statistic-benches"]

[patch.'https://github.com/tower-rs/tower']
tower-layer = "=0.3.0"

[patch.crates-io]
# TODO: update to the next 0.13.x (after 0.13.10, if any) or 0.14 (or higher)
hyper = { version = "0.13", git = "https://github.com/hyperium/hyper", rev = "d7495a75abca34646b1d6d047589c1b8110d0fa5" }
